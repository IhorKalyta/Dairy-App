{"version":3,"sources":["components/List.js","components/Comment.js","components/SideBar.js","App.js","serviceWorker.js","index.js"],"names":["List","removeItem","id","props","className","onClick","setActiveComment","toggleHidden","this","item","title","commentsCount","React","Component","Comments","handleChange","event","setState","value","target","handleEnter","charCode","ctrlKey","addComment","state","comment","trim","length","activeItem","comments","map","key","text","rows","onChange","onKeyPress","SideBar","App","e","addItem","preventDefault","itemsCopy","items","slice","push","Date","getTime","displayComment","saveToLocalStorage","index","splice","inputComment","commentCopy","concat","getActiveItem","find","window","localStorage","setItem","JSON","stringify","isHidden","bind","parse","getItem","$","on","addClass","siblings","removeClass","onSubmit","type","placeholder","role","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ee3dcec4.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport default class List extends React.Component {\r\n\r\n  removeItem = (id) =>{\r\n    this.props.removeItem(id);\r\n  }\r\n\r\n  render(){\r\n    return(\r\n      <li \r\n        className='list-group-item list-group-item-action d-flex justify-content-between align-items-center'\r\n        onClick={() => {this.props.setActiveComment(); this.props.toggleHidden()}}>\r\n          <h3>{this.props.item.title}</h3>\r\n          <span className='badge badge-info badge-pill'> {this.props.item.commentsCount}</span>\r\n          <div className='button-container'>\r\n              <button className='btn btn-outline-danger' onClick={() => this.props.removeItem(this.props.id)}>Delete</button>\r\n          </div>\r\n      </li>\r\n    );\r\n  }\r\n}  \r\n ","import React from 'react';\r\nimport './comments.css';\r\n\r\nexport default class Comments extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {value: ''};\r\n    }\r\n\r\n    handleChange = event => this.setState({value: event.target.value})\r\n    \r\n    handleEnter = event => {\r\n        if (event.charCode === 13 && event.ctrlKey) {\r\n            this.addComment(this.state.value);\r\n        } \r\n    }    \r\n\r\n    addComment = comment => {\r\n        if (comment.trim() && comment.length > 0) {\r\n          this.props.addComment(comment);\r\n          this.setState({value: ''});\r\n        }   \r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            <div className='col-sm-6'>\r\n                <div className='card'>\r\n                    <div className='card-body'>\r\n                            <h1 className='font-weight-light'>Comments #{this.props.activeItem && this.props.activeItem.title}</h1>\r\n                            <ul className='list-group list-group-flush'>\r\n                                { this.props.activeItem &&\r\n                                    this.props.activeItem.comments.map((comment) =>                                                                           \r\n                                        <li \r\n                                            className='list-group-item'\r\n                                            key={comment.id}>\r\n                                                <span className='orangeBox'/>\r\n                                                {comment.text}\r\n                                        </li>                                        \r\n                                    )\r\n                                } \r\n                            </ul>                           \r\n                            <div className='form-group mt-3'>                            \r\n                                <div className='grayBox'/>\r\n                                <textarea \r\n                                    className='ml-2'\r\n                                    rows='4'\r\n                                    value={this.state.value}\r\n                                    onChange={this.handleChange}\r\n                                    onKeyPress={this.handleEnter}\r\n                                />\r\n                            </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport './sideBar.css';\r\n\r\nexport default class SideBar extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n            <div className='sidebar'>\r\n              <div className='sidebar-txt'>\r\n                <h1>DAIRY APP</h1>\r\n                <p>Comment with no sense</p>\r\n              </div>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\nimport './App.css';\nimport List from './components/List';\nimport Comments from './components/Comment';\nimport SideBar from './components/SideBar';\nimport $ from 'jquery';\n\nclass App extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      items: [],\n      text:'',\n      activeItem:{},\n      isHidden: true, \n    };\n    this.removeItem = this.removeItem.bind(this);\n  }\n\n  componentDidMount(){\n    const items = JSON.parse(window.localStorage.getItem('savedList'))||[];\n    this.setState({items});\n\n    $('.list-group').on('click','li', function(){\n      $(this).addClass('actived').siblings().removeClass('actived');\n   });\n  }\n\n  handleChange = (e) => {\n    this.setState({text: e.target.value})\n  }\n\n  addItem = (e) =>{\n    e.preventDefault();\n    let text = this.state.text.trim();\n    if (!text.length) {\n      return;\n    }\n    let itemsCopy = this.state.items.slice();\n    itemsCopy.push({id: (new Date()).getTime(), title: text, commentsCount: 0, comments: [], displayComment: false});\n\n    this.setState({\n      text:'',\n      items:itemsCopy,\n    },\n    this.saveToLocalStorage\n    );\n  }\n\n  removeItem = index =>{\n    let items = this.state.items.slice();\n    items.splice(index, 1);\n    this.setState({\n      items,\n    },\n    this.saveToLocalStorage\n    );\n  }\n      \n  addComment = (inputComment) => {\n     const commentCopy = this.state.items.map(item => {\n       if (item.id === this.state.activeItem.id) {\n         return {\n           ...item, \n           commentsCount: item.comments.length + 1,\n           comments: item.comments.concat({id: item.comments.length + 1, text: inputComment})\n          } \n       }\n         return item\n      });\n      this.setState({\n       items: commentCopy\n      },\n       this.saveToLocalStorage\n      )\n   }\n\n  getActiveItem = () => this.state.items.find(item => item.id === this.state.activeItem.id);\n\n  saveToLocalStorage = () => {\n    window.localStorage.setItem('savedList', JSON.stringify(this.state.items));\n  }\n  \n  render() {\n    return (\n      <div className='App'>\n        <SideBar/>\n        <div className='container mt-3'>\n          <div className='row'>\n            <div className='col-sm-6'>\n            <div className='card'>\n            <div className='card-body'>\n              <h1 className='font-weight-light'>Items</h1>\n              <form className='app' onSubmit={this.addItem}>\n                <div className='row'>\n                  <div className='col-sm-9'>\n                    <input \n                      type='text'\n                      className='form-control mb-2'\n                      placeholder='Type name here...'\n                      value={this.state.text}\n                      onChange={this.handleChange}\n                    />\n                  </div>\n                  <div className='col-sm-3'>\n                    <button className='btn btn-info'>Add new</button>\n                  </div>\n                </div>\n                <ul className='list-group list-group-flush' id='list-tab' role='tablist'>\n                {\n                  this.state.items.map((item, index) => \n                  (<List\n                      item={item} \n                      key={item.id} \n                      id={index} \n                      removeItem={this.removeItem} \n                      setActiveComment={() => this.setState({ activeItem: item })} \n                      toggleHidden={() => this.setState({ isHidden: false })}\n                    />\n                  ))\n                }\n              </ul>\n              </form>\n              </div>\n              </div>\n            </div>          \n              {!this.state.isHidden && <Comments\n                addComment={this.addComment} \n                activeItem={this.getActiveItem()}\n              />}              \n          </div>\n        </div>\n      </div>\n    );\n  } \n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'bootstrap/dist/css/bootstrap.min.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}